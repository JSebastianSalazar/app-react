var __DEV__=false,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV="production";
(function (global) {
  "use strict";

  global.__r = metroRequire;
  global.__d = define;
  global.__c = clear;
  var modules = clear();
  var EMPTY = {};
  var _ref = {},
      hasOwnProperty = _ref.hasOwnProperty;

  function clear() {
    modules = typeof __NUM_MODULES__ === "number" ? Array(__NUM_MODULES__ | 0) : Object.create(null);
    return modules;
  }

  function define(factory, moduleId, dependencyMap) {
    if (modules[moduleId] != null) {
      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      factory: factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {}
      }
    };
  }

  function metroRequire(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  function metroImportDefault(moduleId) {
    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedDefault !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedDefault;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault = exports && exports.__esModule ? exports.default : exports;
    return modules[moduleIdReallyIsNumber].importedDefault = importedDefault;
  }

  function metroImportAll(moduleId) {
    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedAll !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedAll;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll = undefined;

    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};

      if (exports) {
        for (var _key in exports) {
          if (hasOwnProperty.call(exports, _key)) {
            importedAll[_key] = exports[_key];
          }
        }
      }

      importedAll.default = exports;
    }

    return modules[moduleIdReallyIsNumber].importedAll = importedAll;
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = undefined;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = 65535;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  metroRequire.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }

  metroRequire.packModuleId = packModuleId;
  var hooks = [];

  function registerHook(cb) {
    var hook = {
      cb: cb
    };
    hooks.push(hook);
    return {
      release: function release() {
        for (var i = 0; i < hooks.length; ++i) {
          if (hooks[i] === hook) {
            hooks.splice(i, 1);
            break;
          }
        }
      }
    };
  }

  metroRequire.registerHook = registerHook;

  function loadModuleImplementation(moduleId, module) {
    if (!module && global.__defineModule) {
      global.__defineModule(moduleId);

      module = modules[moduleId];
    }

    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId),
          _segmentId = _unpackModuleId.segmentId,
          _localId = _unpackModuleId.localId;

      nativeRequire(_localId, _segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    module.isInitialized = true;
    var _module = module,
        factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      var _moduleObject = module.publicModule;
      _moduleObject.id = moduleId;

      if (hooks.length > 0) {
        for (var i = 0; i < hooks.length; ++i) {
          hooks[i].cb(moduleId, _moduleObject);
        }
      }

      factory(global, metroRequire, metroImportDefault, metroImportAll, _moduleObject, _moduleObject.exports, dependencyMap);
      {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      return _moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {}
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _flipper = global.Flipper;

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  const Container = (0, _flipper.styled)(_flipper.FlexColumn)({
    alignItems: 'center',
    justifyContent: 'space-around',
    padding: 20
  });

  class _class extends _flipper.FlipperPlugin {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "state", {
        prompt: 'Type a message below to see it displayed on the mobile app',
        message: ''
      });
    }

    sendMessage() {
      this.client.call('displayMessage', {
        message: this.state.message || 'Weeeee!'
      }).then(params => {
        this.setState({
          prompt: 'Nice'
        });
      });
    }

    render() {
      return global.React.createElement(Container, null, global.React.createElement(_flipper.Text, null, this.state.prompt), global.React.createElement(_flipper.Input, {
        placeholder: "Message",
        onChange: event => {
          this.setState({
            message: event.target.value
          });
        }
      }), global.React.createElement(_flipper.Button, {
        onClick: this.sendMessage.bind(this)
      }, "Send"), this.props.persistedState.receivedMessage && global.React.createElement(_flipper.Text, null, " ", this.props.persistedState.receivedMessage, " "));
    }

  }

  exports.default = _class;

  _defineProperty(_class, "defaultPersistedState", {
    currentNotificationIds: [],
    receivedMessage: null
  });

  _defineProperty(_class, "persistedStateReducer", (persistedState, method, payload) => {
    if (method === 'triggerNotification') {
      return _objectSpread({}, persistedState, {
        currentNotificationIds: persistedState.currentNotificationIds.concat([payload.id])
      });
    }

    if (method === 'displayMessage') {
      return _objectSpread({}, persistedState, {
        receivedMessage: payload.msg
      });
    }

    return persistedState || {};
  });

  _defineProperty(_class, "getActiveNotifications", persistedState => {
    return persistedState.currentNotificationIds.map(x => {
      return {
        id: 'test-notification:' + x,
        message: 'Example Notification',
        severity: 'warning',
        title: 'Notification: ' + x
      };
    });
  });
},1861162543,[]);
module.exports = global.__r(1861162543).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9fcHJlbHVkZV9fIiwiL2RhdGEvc2FuZGNhc3RsZS9ib3hlcy90cnVuay1oZy1mYmNvZGUtZmJzb3VyY2UveHBsYXQvZmxpcHBlci1wdWJsaWMvc3RhdGljL25vZGVfbW9kdWxlcy9tZXRyby9zcmMvbGliL3BvbHlmaWxscy9yZXF1aXJlLmpzIiwiL2RhdGEvc2FuZGNhc3RsZS9ib3hlcy90cnVuay1oZy1mYmNvZGUtZmJzb3VyY2UveHBsYXQvZmxpcHBlci1wdWJsaWMvc3JjL3BsdWdpbnMvZXhhbXBsZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19ERVZfXz1mYWxzZSxfX0JVTkRMRV9TVEFSVF9USU1FX189dGhpcy5uYXRpdmVQZXJmb3JtYW5jZU5vdz9uYXRpdmVQZXJmb3JtYW5jZU5vdygpOkRhdGUubm93KCkscHJvY2Vzcz10aGlzLnByb2Nlc3N8fHt9O3Byb2Nlc3MuZW52PXByb2Nlc3MuZW52fHx7fTtwcm9jZXNzLmVudi5OT0RFX0VOVj1cInByb2R1Y3Rpb25cIjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBwb2x5ZmlsbFxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG5nbG9iYWwuX19yID0gbWV0cm9SZXF1aXJlO1xuZ2xvYmFsLl9fZCA9IGRlZmluZTtcbmdsb2JhbC5fX2MgPSBjbGVhcjtcblxudmFyIG1vZHVsZXMgPSBjbGVhcigpO1xuXG4vLyBEb24ndCB1c2UgYSBTeW1ib2wgaGVyZSwgaXQgd291bGQgcHVsbCBpbiBhbiBleHRyYSBwb2x5ZmlsbCB3aXRoIGFsbCBzb3J0cyBvZlxuLy8gYWRkaXRpb25hbCBzdHVmZiAoZS5nLiBBcnJheS5mcm9tKS5cbnZhciBFTVBUWSA9IHt9O1xudmFyIF9yZWYgPSB7fSxcbiAgaGFzT3duUHJvcGVydHkgPSBfcmVmLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgbW9kdWxlcyA9XG4gICAgdHlwZW9mIF9fTlVNX01PRFVMRVNfXyA9PT0gXCJudW1iZXJcIlxuICAgICAgPyBBcnJheShfX05VTV9NT0RVTEVTX18gfCAwKVxuICAgICAgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vIFdlIHJldHVybiBtb2R1bGVzIGhlcmUgc28gdGhhdCB3ZSBjYW4gYXNzaWduIGFuIGluaXRpYWwgdmFsdWUgdG8gbW9kdWxlc1xuICAvLyB3aGVuIGRlZmluaW5nIGl0LiBPdGhlcndpc2UsIHdlIHdvdWxkIGhhdmUgdG8gZG8gXCJsZXQgbW9kdWxlcyA9IG51bGxcIixcbiAgLy8gd2hpY2ggd2lsbCBmb3JjZSB1cyB0byBhZGQgXCJudWxsdGhyb3dzXCIgZXZlcnl3aGVyZS5cbiAgcmV0dXJuIG1vZHVsZXM7XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciB2ZXJib3NlTmFtZXNUb01vZHVsZUlkcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBpbml0aWFsaXppbmdNb2R1bGVJZHMgPSBbXTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lKGZhY3RvcnksIG1vZHVsZUlkLCBkZXBlbmRlbmN5TWFwKSB7XG4gIGlmIChtb2R1bGVzW21vZHVsZUlkXSAhPSBudWxsKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIC8vIChXZSB0YWtlIGBpbnZlcnNlRGVwZW5kZW5jaWVzYCBmcm9tIGBhcmd1bWVudHNgIHRvIGF2b2lkIGFuIHVudXNlZFxuICAgICAgLy8gbmFtZWQgcGFyYW1ldGVyIGluIGBkZWZpbmVgIGluIHByb2R1Y3Rpb24uXG4gICAgICB2YXIgaW52ZXJzZURlcGVuZGVuY2llcyA9IGFyZ3VtZW50c1s0XTtcblxuICAgICAgLy8gSWYgdGhlIG1vZHVsZSBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYW5kIHRoZSBkZWZpbmUgbWV0aG9kIGhhcyBiZWVuXG4gICAgICAvLyBjYWxsZWQgd2l0aCBpbnZlcnNlRGVwZW5kZW5jaWVzLCB3ZSBjYW4gaG90IHJlbG9hZCBpdC5cbiAgICAgIGlmIChpbnZlcnNlRGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIGdsb2JhbC5fX2FjY2VwdChtb2R1bGVJZCwgZmFjdG9yeSwgZGVwZW5kZW5jeU1hcCwgaW52ZXJzZURlcGVuZGVuY2llcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJUcnlpbmcgdG8gZGVmaW5lIHR3aWNlIG1vZHVsZSBJRCBcIiArIG1vZHVsZUlkICsgXCIgaW4gdGhlIHNhbWUgYnVuZGxlXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwcmV2ZW50IHJlcGVhdGVkIGNhbGxzIHRvIGBnbG9iYWwubmF0aXZlUmVxdWlyZWAgdG8gb3ZlcndyaXRlIG1vZHVsZXNcbiAgICAvLyB0aGF0IGFyZSBhbHJlYWR5IGxvYWRlZFxuICAgIHJldHVybjtcbiAgfVxuICBtb2R1bGVzW21vZHVsZUlkXSA9IHtcbiAgICBkZXBlbmRlbmN5TWFwOiBkZXBlbmRlbmN5TWFwLFxuICAgIGZhY3Rvcnk6IGZhY3RvcnksXG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgIGltcG9ydGVkQWxsOiBFTVBUWSxcbiAgICBpbXBvcnRlZERlZmF1bHQ6IEVNUFRZLFxuICAgIGlzSW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgIHB1YmxpY01vZHVsZTogeyBleHBvcnRzOiB7fSB9XG4gIH07XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgLy8gSE1SXG4gICAgbW9kdWxlc1ttb2R1bGVJZF0uaG90ID0gY3JlYXRlSG90UmVsb2FkaW5nT2JqZWN0KCk7XG5cbiAgICAvLyBERUJVR0dBQkxFIE1PRFVMRVMgTkFNRVNcbiAgICAvLyB3ZSB0YWtlIGB2ZXJib3NlTmFtZWAgZnJvbSBgYXJndW1lbnRzYCB0byBhdm9pZCBhbiB1bnVzZWQgbmFtZWQgcGFyYW1ldGVyXG4gICAgLy8gaW4gYGRlZmluZWAgaW4gcHJvZHVjdGlvbi5cbiAgICB2YXIgX3ZlcmJvc2VOYW1lID0gYXJndW1lbnRzWzNdO1xuICAgIGlmIChfdmVyYm9zZU5hbWUpIHtcbiAgICAgIG1vZHVsZXNbbW9kdWxlSWRdLnZlcmJvc2VOYW1lID0gX3ZlcmJvc2VOYW1lO1xuICAgICAgdmVyYm9zZU5hbWVzVG9Nb2R1bGVJZHNbX3ZlcmJvc2VOYW1lXSA9IG1vZHVsZUlkO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXRyb1JlcXVpcmUobW9kdWxlSWQpIHtcbiAgaWYgKF9fREVWX18gJiYgdHlwZW9mIG1vZHVsZUlkID09PSBcInN0cmluZ1wiKSB7XG4gICAgdmFyIF92ZXJib3NlTmFtZTIgPSBtb2R1bGVJZDtcbiAgICBtb2R1bGVJZCA9IHZlcmJvc2VOYW1lc1RvTW9kdWxlSWRzW192ZXJib3NlTmFtZTJdO1xuICAgIGlmIChtb2R1bGVJZCA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbmFtZWQgbW9kdWxlOiBcIicgKyBfdmVyYm9zZU5hbWUyICsgJ1wiJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1JlcXVpcmluZyBtb2R1bGUgXCInICtcbiAgICAgICAgICBfdmVyYm9zZU5hbWUyICtcbiAgICAgICAgICAnXCIgYnkgbmFtZSBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgJyArXG4gICAgICAgICAgXCJkZWJ1Z2dpbmcgcHVycG9zZXMgYW5kIHdpbGwgQlJFQUsgSU4gUFJPRFVDVElPTiFcIlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyRGbG93Rml4TWU6IGF0IHRoaXMgcG9pbnQgd2Uga25vdyB0aGF0IG1vZHVsZUlkIGlzIGEgbnVtYmVyXG4gIHZhciBtb2R1bGVJZFJlYWxseUlzTnVtYmVyID0gbW9kdWxlSWQ7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICB2YXIgaW5pdGlhbGl6aW5nSW5kZXggPSBpbml0aWFsaXppbmdNb2R1bGVJZHMuaW5kZXhPZihcbiAgICAgIG1vZHVsZUlkUmVhbGx5SXNOdW1iZXJcbiAgICApO1xuICAgIGlmIChpbml0aWFsaXppbmdJbmRleCAhPT0gLTEpIHtcbiAgICAgIHZhciBjeWNsZSA9IGluaXRpYWxpemluZ01vZHVsZUlkc1xuICAgICAgICAuc2xpY2UoaW5pdGlhbGl6aW5nSW5kZXgpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICByZXR1cm4gbW9kdWxlc1tpZF0udmVyYm9zZU5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgLy8gV2Ugd2FudCB0byBzaG93IEEgLT4gQiAtPiBBOlxuICAgICAgY3ljbGUucHVzaChjeWNsZVswXSk7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiUmVxdWlyZSBjeWNsZTogXCIgK1xuICAgICAgICAgIGN5Y2xlLmpvaW4oXCIgLT4gXCIpICtcbiAgICAgICAgICBcIlxcblxcblwiICtcbiAgICAgICAgICBcIlJlcXVpcmUgY3ljbGVzIGFyZSBhbGxvd2VkLCBidXQgY2FuIHJlc3VsdCBpbiB1bmluaXRpYWxpemVkIHZhbHVlcy4gXCIgK1xuICAgICAgICAgIFwiQ29uc2lkZXIgcmVmYWN0b3JpbmcgdG8gcmVtb3ZlIHRoZSBuZWVkIGZvciBhIGN5Y2xlLlwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtb2R1bGUgPSBtb2R1bGVzW21vZHVsZUlkUmVhbGx5SXNOdW1iZXJdO1xuXG4gIHJldHVybiBtb2R1bGUgJiYgbW9kdWxlLmlzSW5pdGlhbGl6ZWRcbiAgICA/IG1vZHVsZS5wdWJsaWNNb2R1bGUuZXhwb3J0c1xuICAgIDogZ3VhcmRlZExvYWRNb2R1bGUobW9kdWxlSWRSZWFsbHlJc051bWJlciwgbW9kdWxlKTtcbn1cblxuZnVuY3Rpb24gbWV0cm9JbXBvcnREZWZhdWx0KG1vZHVsZUlkKSB7XG4gIGlmIChfX0RFVl9fICYmIHR5cGVvZiBtb2R1bGVJZCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHZhciBfdmVyYm9zZU5hbWUzID0gbW9kdWxlSWQ7XG4gICAgbW9kdWxlSWQgPSB2ZXJib3NlTmFtZXNUb01vZHVsZUlkc1tfdmVyYm9zZU5hbWUzXTtcbiAgfVxuXG4gIC8vJEZsb3dGaXhNZTogYXQgdGhpcyBwb2ludCB3ZSBrbm93IHRoYXQgbW9kdWxlSWQgaXMgYSBudW1iZXJcbiAgdmFyIG1vZHVsZUlkUmVhbGx5SXNOdW1iZXIgPSBtb2R1bGVJZDtcblxuICBpZiAoXG4gICAgbW9kdWxlc1ttb2R1bGVJZFJlYWxseUlzTnVtYmVyXSAmJlxuICAgIG1vZHVsZXNbbW9kdWxlSWRSZWFsbHlJc051bWJlcl0uaW1wb3J0ZWREZWZhdWx0ICE9PSBFTVBUWVxuICApIHtcbiAgICByZXR1cm4gbW9kdWxlc1ttb2R1bGVJZFJlYWxseUlzTnVtYmVyXS5pbXBvcnRlZERlZmF1bHQ7XG4gIH1cblxuICB2YXIgZXhwb3J0cyA9IG1ldHJvUmVxdWlyZShtb2R1bGVJZFJlYWxseUlzTnVtYmVyKTtcbiAgdmFyIGltcG9ydGVkRGVmYXVsdCA9XG4gICAgZXhwb3J0cyAmJiBleHBvcnRzLl9fZXNNb2R1bGUgPyBleHBvcnRzLmRlZmF1bHQgOiBleHBvcnRzO1xuXG4gIHJldHVybiAobW9kdWxlc1ttb2R1bGVJZFJlYWxseUlzTnVtYmVyXS5pbXBvcnRlZERlZmF1bHQgPSBpbXBvcnRlZERlZmF1bHQpO1xufVxuXG5mdW5jdGlvbiBtZXRyb0ltcG9ydEFsbChtb2R1bGVJZCkge1xuICBpZiAoX19ERVZfXyAmJiB0eXBlb2YgbW9kdWxlSWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICB2YXIgX3ZlcmJvc2VOYW1lNCA9IG1vZHVsZUlkO1xuICAgIG1vZHVsZUlkID0gdmVyYm9zZU5hbWVzVG9Nb2R1bGVJZHNbX3ZlcmJvc2VOYW1lNF07XG4gIH1cblxuICAvLyRGbG93Rml4TWU6IGF0IHRoaXMgcG9pbnQgd2Uga25vdyB0aGF0IG1vZHVsZUlkIGlzIGEgbnVtYmVyXG4gIHZhciBtb2R1bGVJZFJlYWxseUlzTnVtYmVyID0gbW9kdWxlSWQ7XG5cbiAgaWYgKFxuICAgIG1vZHVsZXNbbW9kdWxlSWRSZWFsbHlJc051bWJlcl0gJiZcbiAgICBtb2R1bGVzW21vZHVsZUlkUmVhbGx5SXNOdW1iZXJdLmltcG9ydGVkQWxsICE9PSBFTVBUWVxuICApIHtcbiAgICByZXR1cm4gbW9kdWxlc1ttb2R1bGVJZFJlYWxseUlzTnVtYmVyXS5pbXBvcnRlZEFsbDtcbiAgfVxuXG4gIHZhciBleHBvcnRzID0gbWV0cm9SZXF1aXJlKG1vZHVsZUlkUmVhbGx5SXNOdW1iZXIpO1xuICB2YXIgaW1wb3J0ZWRBbGwgPSB2b2lkIDA7XG5cbiAgaWYgKGV4cG9ydHMgJiYgZXhwb3J0cy5fX2VzTW9kdWxlKSB7XG4gICAgaW1wb3J0ZWRBbGwgPSBleHBvcnRzO1xuICB9IGVsc2Uge1xuICAgIGltcG9ydGVkQWxsID0ge307XG5cbiAgICAvLyBSZWZyYWluIGZyb20gdXNpbmcgT2JqZWN0LmFzc2lnbiwgaXQgaGFzIHRvIHdvcmsgaW4gRVMzIGVudmlyb25tZW50cy5cbiAgICBpZiAoZXhwb3J0cykge1xuICAgICAgZm9yICh2YXIgX2tleSBpbiBleHBvcnRzKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIF9rZXkpKSB7XG4gICAgICAgICAgaW1wb3J0ZWRBbGxbX2tleV0gPSBleHBvcnRzW19rZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW1wb3J0ZWRBbGwuZGVmYXVsdCA9IGV4cG9ydHM7XG4gIH1cblxuICByZXR1cm4gKG1vZHVsZXNbbW9kdWxlSWRSZWFsbHlJc051bWJlcl0uaW1wb3J0ZWRBbGwgPSBpbXBvcnRlZEFsbCk7XG59XG5cbnZhciBpbkd1YXJkID0gZmFsc2U7XG5mdW5jdGlvbiBndWFyZGVkTG9hZE1vZHVsZShtb2R1bGVJZCwgbW9kdWxlKSB7XG4gIGlmICghaW5HdWFyZCAmJiBnbG9iYWwuRXJyb3JVdGlscykge1xuICAgIGluR3VhcmQgPSB0cnVlO1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IHZvaWQgMDtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuVmFsdWUgPSBsb2FkTW9kdWxlSW1wbGVtZW50YXRpb24obW9kdWxlSWQsIG1vZHVsZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZ2xvYmFsLkVycm9yVXRpbHMucmVwb3J0RmF0YWxFcnJvcihlKTtcbiAgICB9XG4gICAgaW5HdWFyZCA9IGZhbHNlO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbG9hZE1vZHVsZUltcGxlbWVudGF0aW9uKG1vZHVsZUlkLCBtb2R1bGUpO1xuICB9XG59XG5cbnZhciBJRF9NQVNLX1NISUZUID0gMTY7XG52YXIgTE9DQUxfSURfTUFTSyA9IH4wID4+PiBJRF9NQVNLX1NISUZUO1xuXG5mdW5jdGlvbiB1bnBhY2tNb2R1bGVJZChtb2R1bGVJZCkge1xuICB2YXIgc2VnbWVudElkID0gbW9kdWxlSWQgPj4+IElEX01BU0tfU0hJRlQ7XG4gIHZhciBsb2NhbElkID0gbW9kdWxlSWQgJiBMT0NBTF9JRF9NQVNLO1xuICByZXR1cm4geyBzZWdtZW50SWQ6IHNlZ21lbnRJZCwgbG9jYWxJZDogbG9jYWxJZCB9O1xufVxubWV0cm9SZXF1aXJlLnVucGFja01vZHVsZUlkID0gdW5wYWNrTW9kdWxlSWQ7XG5cbmZ1bmN0aW9uIHBhY2tNb2R1bGVJZCh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlLnNlZ21lbnRJZCA8PCBJRF9NQVNLX1NISUZUKSArIHZhbHVlLmxvY2FsSWQ7XG59XG5tZXRyb1JlcXVpcmUucGFja01vZHVsZUlkID0gcGFja01vZHVsZUlkO1xuXG52YXIgaG9va3MgPSBbXTtcbmZ1bmN0aW9uIHJlZ2lzdGVySG9vayhjYikge1xuICB2YXIgaG9vayA9IHsgY2I6IGNiIH07XG4gIGhvb2tzLnB1c2goaG9vayk7XG4gIHJldHVybiB7XG4gICAgcmVsZWFzZTogZnVuY3Rpb24gcmVsZWFzZSgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGhvb2tzW2ldID09PSBob29rKSB7XG4gICAgICAgICAgaG9va3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxubWV0cm9SZXF1aXJlLnJlZ2lzdGVySG9vayA9IHJlZ2lzdGVySG9vaztcblxuZnVuY3Rpb24gbG9hZE1vZHVsZUltcGxlbWVudGF0aW9uKG1vZHVsZUlkLCBtb2R1bGUpIHtcbiAgaWYgKCFtb2R1bGUgJiYgZ2xvYmFsLl9fZGVmaW5lTW9kdWxlKSB7XG4gICAgZ2xvYmFsLl9fZGVmaW5lTW9kdWxlKG1vZHVsZUlkKTtcbiAgICBtb2R1bGUgPSBtb2R1bGVzW21vZHVsZUlkXTtcbiAgfVxuXG4gIHZhciBuYXRpdmVSZXF1aXJlID0gZ2xvYmFsLm5hdGl2ZVJlcXVpcmU7XG4gIGlmICghbW9kdWxlICYmIG5hdGl2ZVJlcXVpcmUpIHtcbiAgICB2YXIgX3VucGFja01vZHVsZUlkID0gdW5wYWNrTW9kdWxlSWQobW9kdWxlSWQpLFxuICAgICAgX3NlZ21lbnRJZCA9IF91bnBhY2tNb2R1bGVJZC5zZWdtZW50SWQsXG4gICAgICBfbG9jYWxJZCA9IF91bnBhY2tNb2R1bGVJZC5sb2NhbElkO1xuXG4gICAgbmF0aXZlUmVxdWlyZShfbG9jYWxJZCwgX3NlZ21lbnRJZCk7XG4gICAgbW9kdWxlID0gbW9kdWxlc1ttb2R1bGVJZF07XG4gIH1cblxuICBpZiAoIW1vZHVsZSkge1xuICAgIHRocm93IHVua25vd25Nb2R1bGVFcnJvcihtb2R1bGVJZCk7XG4gIH1cblxuICBpZiAobW9kdWxlLmhhc0Vycm9yKSB7XG4gICAgdGhyb3cgbW9kdWxlVGhyZXdFcnJvcihtb2R1bGVJZCwgbW9kdWxlLmVycm9yKTtcbiAgfVxuXG4gIC8vIGBtZXRyb1JlcXVpcmVgIGNhbGxzIGludG8gdGhlIHJlcXVpcmUgcG9seWZpbGwgaXRzZWxmIGFyZSBub3QgYW5hbHl6ZWQgYW5kXG4gIC8vIHJlcGxhY2VkIHNvIHRoYXQgdGhleSB1c2UgbnVtZXJpYyBtb2R1bGUgSURzLlxuICAvLyBUaGUgc3lzdHJhY2UgbW9kdWxlIHdpbGwgZXhwb3NlIGl0c2VsZiBvbiB0aGUgbWV0cm9SZXF1aXJlIGZ1bmN0aW9uIHNvIHRoYXRcbiAgLy8gaXQgY2FuIGJlIHVzZWQgaGVyZS5cbiAgLy8gVE9ETyhkYXZpZGF1cmVsaW8pIFNjYW4gcG9seWZpbGxzIGZvciBkZXBlbmRlbmNpZXMsIHRvbyAodDk3NTk2ODYpXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgdmFyIFN5c3RyYWNlID0gbWV0cm9SZXF1aXJlLlN5c3RyYWNlO1xuICB9XG5cbiAgLy8gV2UgbXVzdCBvcHRpbWlzdGljYWxseSBtYXJrIG1vZHVsZSBhcyBpbml0aWFsaXplZCBiZWZvcmUgcnVubmluZyB0aGVcbiAgLy8gZmFjdG9yeSB0byBrZWVwIGFueSByZXF1aXJlIGN5Y2xlcyBpbnNpZGUgdGhlIGZhY3RvcnkgZnJvbSBjYXVzaW5nIGFuXG4gIC8vIGluZmluaXRlIHJlcXVpcmUgbG9vcC5cbiAgbW9kdWxlLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gIHZhciBfbW9kdWxlID0gbW9kdWxlLFxuICAgIGZhY3RvcnkgPSBfbW9kdWxlLmZhY3RvcnksXG4gICAgZGVwZW5kZW5jeU1hcCA9IF9tb2R1bGUuZGVwZW5kZW5jeU1hcDtcblxuICBpZiAoX19ERVZfXykge1xuICAgIGluaXRpYWxpemluZ01vZHVsZUlkcy5wdXNoKG1vZHVsZUlkKTtcbiAgfVxuICB0cnkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lOiB3ZSBrbm93IHRoYXQgX19ERVZfXyBpcyBjb25zdCBhbmQgYFN5c3RyYWNlYCBleGlzdHNcbiAgICAgIFN5c3RyYWNlLmJlZ2luRXZlbnQoXCJKU19yZXF1aXJlX1wiICsgKG1vZHVsZS52ZXJib3NlTmFtZSB8fCBtb2R1bGVJZCkpO1xuICAgIH1cblxuICAgIHZhciBfbW9kdWxlT2JqZWN0ID0gbW9kdWxlLnB1YmxpY01vZHVsZTtcblxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpZiAobW9kdWxlLmhvdCkge1xuICAgICAgICBfbW9kdWxlT2JqZWN0LmhvdCA9IG1vZHVsZS5ob3Q7XG4gICAgICB9XG4gICAgfVxuICAgIF9tb2R1bGVPYmplY3QuaWQgPSBtb2R1bGVJZDtcblxuICAgIGlmIChob29rcy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGhvb2tzW2ldLmNiKG1vZHVsZUlkLCBfbW9kdWxlT2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBrZWVwIGFyZ3MgaW4gc3luYyB3aXRoIHdpdGggZGVmaW5lTW9kdWxlQ29kZSBpblxuICAgIC8vIG1ldHJvL3NyYy9SZXNvbHZlci9pbmRleC5qc1xuICAgIC8vIGFuZCBtZXRyby9zcmMvTW9kdWxlR3JhcGgvd29ya2VyLmpzXG4gICAgZmFjdG9yeShcbiAgICAgIGdsb2JhbCxcbiAgICAgIG1ldHJvUmVxdWlyZSxcbiAgICAgIG1ldHJvSW1wb3J0RGVmYXVsdCxcbiAgICAgIG1ldHJvSW1wb3J0QWxsLFxuICAgICAgX21vZHVsZU9iamVjdCxcbiAgICAgIF9tb2R1bGVPYmplY3QuZXhwb3J0cyxcbiAgICAgIGRlcGVuZGVuY3lNYXBcbiAgICApO1xuXG4gICAgLy8gYXZvaWQgcmVtb3ZpbmcgZmFjdG9yeSBpbiBERVYgbW9kZSBhcyBpdCBicmVha3MgSE1SXG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lOiBUaGlzIGlzIG9ubHkgc291bmQgYmVjYXVzZSB3ZSBuZXZlciBhY2Nlc3MgYGZhY3RvcnlgIGFnYWluXG4gICAgICBtb2R1bGUuZmFjdG9yeSA9IHVuZGVmaW5lZDtcbiAgICAgIG1vZHVsZS5kZXBlbmRlbmN5TWFwID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lOiB3ZSBrbm93IHRoYXQgX19ERVZfXyBpcyBjb25zdCBhbmQgYFN5c3RyYWNlYCBleGlzdHNcbiAgICAgIFN5c3RyYWNlLmVuZEV2ZW50KCk7XG4gICAgfVxuICAgIHJldHVybiBfbW9kdWxlT2JqZWN0LmV4cG9ydHM7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBtb2R1bGUuaGFzRXJyb3IgPSB0cnVlO1xuICAgIG1vZHVsZS5lcnJvciA9IGU7XG4gICAgbW9kdWxlLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBtb2R1bGUucHVibGljTW9kdWxlLmV4cG9ydHMgPSB1bmRlZmluZWQ7XG4gICAgdGhyb3cgZTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKGluaXRpYWxpemluZ01vZHVsZUlkcy5wb3AoKSAhPT0gbW9kdWxlSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiaW5pdGlhbGl6aW5nTW9kdWxlSWRzIGlzIGNvcnJ1cHQ7IHNvbWV0aGluZyBpcyB0ZXJyaWJseSB3cm9uZ1wiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVua25vd25Nb2R1bGVFcnJvcihpZCkge1xuICB2YXIgbWVzc2FnZSA9ICdSZXF1aXJpbmcgdW5rbm93biBtb2R1bGUgXCInICsgaWQgKyAnXCIuJztcbiAgaWYgKF9fREVWX18pIHtcbiAgICBtZXNzYWdlICs9XG4gICAgICBcIklmIHlvdSBhcmUgc3VyZSB0aGUgbW9kdWxlIGlzIHRoZXJlLCB0cnkgcmVzdGFydGluZyBNZXRybyBCdW5kbGVyLiBcIiArXG4gICAgICBcIllvdSBtYXkgYWxzbyB3YW50IHRvIHJ1biBgeWFybmAsIG9yIGBucG0gaW5zdGFsbGAgKGRlcGVuZGluZyBvbiB5b3VyIGVudmlyb25tZW50KS5cIjtcbiAgfVxuICByZXR1cm4gRXJyb3IobWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZVRocmV3RXJyb3IoaWQsIGVycm9yKSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IChfX0RFVl9fICYmIG1vZHVsZXNbaWRdICYmIG1vZHVsZXNbaWRdLnZlcmJvc2VOYW1lKSB8fCBpZDtcbiAgcmV0dXJuIEVycm9yKFxuICAgICdSZXF1aXJpbmcgbW9kdWxlIFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLCB3aGljaCB0aHJldyBhbiBleGNlcHRpb246ICcgKyBlcnJvclxuICApO1xufVxuXG5pZiAoX19ERVZfXykge1xuICBtZXRyb1JlcXVpcmUuU3lzdHJhY2UgPSB7XG4gICAgYmVnaW5FdmVudDogZnVuY3Rpb24gYmVnaW5FdmVudCgpIHt9LFxuICAgIGVuZEV2ZW50OiBmdW5jdGlvbiBlbmRFdmVudCgpIHt9XG4gIH07XG5cbiAgbWV0cm9SZXF1aXJlLmdldE1vZHVsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbW9kdWxlcztcbiAgfTtcblxuICAvLyBIT1QgTU9EVUxFIFJFTE9BRElOR1xuICB2YXIgY3JlYXRlSG90UmVsb2FkaW5nT2JqZWN0ID0gZnVuY3Rpb24gY3JlYXRlSG90UmVsb2FkaW5nT2JqZWN0KCkge1xuICAgIHZhciBob3QgPSB7XG4gICAgICBhY2NlcHRDYWxsYmFjazogbnVsbCxcbiAgICAgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KGNhbGxiYWNrKSB7XG4gICAgICAgIGhvdC5hY2NlcHRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgfSxcbiAgICAgIGRpc3Bvc2VDYWxsYmFjazogbnVsbCxcbiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoY2FsbGJhY2spIHtcbiAgICAgICAgaG90LmRpc3Bvc2VDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGhvdDtcbiAgfTtcblxuICB2YXIgbWV0cm9BY2NlcHRBbGwgPSBmdW5jdGlvbiBtZXRyb0FjY2VwdEFsbChcbiAgICBkZXBlbmRlbnRNb2R1bGVzLFxuICAgIGludmVyc2VEZXBlbmRlbmNpZXMsXG4gICAgcGF0Y2hlZE1vZHVsZXNcbiAgKSB7XG4gICAgaWYgKCFkZXBlbmRlbnRNb2R1bGVzIHx8IGRlcGVuZGVudE1vZHVsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbm90QWNjZXB0ZWQgPSBkZXBlbmRlbnRNb2R1bGVzLmZpbHRlcihmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIHJldHVybiAhbWV0cm9BY2NlcHQoXG4gICAgICAgIG1vZHVsZSxcbiAgICAgICAgLypmYWN0b3J5Ki8gdW5kZWZpbmVkLFxuICAgICAgICAvKmRlcGVuZGVuY3lNYXAqLyB1bmRlZmluZWQsXG4gICAgICAgIGludmVyc2VEZXBlbmRlbmNpZXMsXG4gICAgICAgIHBhdGNoZWRNb2R1bGVzXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdmFyIHBhcmVudHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vdEFjY2VwdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBpZiB0aGUgbW9kdWxlIGhhcyBubyBwYXJlbnRzIHRoZW4gdGhlIGNoYW5nZSBjYW5ub3QgYmUgaG90IGxvYWRlZFxuICAgICAgaWYgKGludmVyc2VEZXBlbmRlbmNpZXNbbm90QWNjZXB0ZWRbaV1dLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudHMucHVzaC5hcHBseShwYXJlbnRzLCBpbnZlcnNlRGVwZW5kZW5jaWVzW25vdEFjY2VwdGVkW2ldXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudHMubGVuZ3RoID09IDA7XG4gIH07XG5cbiAgdmFyIG1ldHJvQWNjZXB0ID0gZnVuY3Rpb24gbWV0cm9BY2NlcHQoXG4gICAgaWQsXG4gICAgZmFjdG9yeSxcbiAgICBkZXBlbmRlbmN5TWFwLFxuICAgIGludmVyc2VEZXBlbmRlbmNpZXNcbiAgKSB7XG4gICAgdmFyIHBhdGNoZWRNb2R1bGVzID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG5cbiAgICBpZiAoaWQgaW4gcGF0Y2hlZE1vZHVsZXMpIHtcbiAgICAgIC8vIERvIG5vdCBwYXRjaCB0aGUgc2FtZSBtb2R1bGUgbW9yZSB0aGF0IG9uY2UgZHVyaW5nIGFuIHVwZGF0ZS5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBwYXRjaGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXG4gICAgdmFyIG1vZCA9IG1vZHVsZXNbaWRdO1xuXG4gICAgaWYgKCFtb2QgJiYgZmFjdG9yeSkge1xuICAgICAgLy8gTmV3IG1vZHVsZXMgYXJlIGdvaW5nIHRvIGJlIGhhbmRsZWQgYnkgdGhlIGRlZmluZSgpIG1ldGhvZC5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBob3QgPSBtb2QuaG90O1xuXG4gICAgaWYgKCFob3QpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJDYW5ub3QgYWNjZXB0IG1vZHVsZSBiZWNhdXNlIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgXCIgK1xuICAgICAgICAgIFwiQVBJIHdhcyBub3QgaW5zdGFsbGVkLlwiXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChob3QuZGlzcG9zZUNhbGxiYWNrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBob3QuZGlzcG9zZUNhbGxiYWNrKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIFwiRXJyb3Igd2hpbGUgY2FsbGluZyBkaXNwb3NlIGhhbmRsZXIgZm9yIG1vZHVsZSBcIiArIGlkICsgXCI6IFwiLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVwbGFjZSBhbmQgaW5pdGlhbGl6ZSBmYWN0b3J5XG4gICAgaWYgKGZhY3RvcnkpIHtcbiAgICAgIG1vZC5mYWN0b3J5ID0gZmFjdG9yeTtcbiAgICB9XG4gICAgaWYgKGRlcGVuZGVuY3lNYXApIHtcbiAgICAgIG1vZC5kZXBlbmRlbmN5TWFwID0gZGVwZW5kZW5jeU1hcDtcbiAgICB9XG4gICAgbW9kLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgbW9kLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBtZXRyb1JlcXVpcmUoaWQpO1xuXG4gICAgaWYgKGhvdC5hY2NlcHRDYWxsYmFjaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaG90LmFjY2VwdENhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBcIkVycm9yIHdoaWxlIGNhbGxpbmcgYWNjZXB0IGhhbmRsZXIgZm9yIG1vZHVsZSBcIiArIGlkICsgXCI6IFwiLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbmVlZCB0byBoYXZlIGludmVyc2VEZXBlbmRlbmNpZXMgdG8gYnViYmxlIHVwIGFjY2VwdFxuICAgIGlmICghaW52ZXJzZURlcGVuZGVuY2llcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5kZWZpbmVkIGBpbnZlcnNlRGVwZW5kZW5jaWVzYFwiKTtcbiAgICB9XG5cbiAgICAvLyBhY2NlcHQgcGFyZW50IG1vZHVsZXMgcmVjdXJzaXZlbHkgdXAgdW50aWwgYWxsIHNpYmxpbmdzIGFyZSBhY2NlcHRlZFxuICAgIHJldHVybiBtZXRyb0FjY2VwdEFsbChcbiAgICAgIGludmVyc2VEZXBlbmRlbmNpZXNbaWRdLFxuICAgICAgaW52ZXJzZURlcGVuZGVuY2llcyxcbiAgICAgIHBhdGNoZWRNb2R1bGVzXG4gICAgKTtcbiAgfTtcblxuICBnbG9iYWwuX19hY2NlcHQgPSBtZXRyb0FjY2VwdDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBGYWNlYm9vay5cbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQge0J1dHRvbiwgSW5wdXQsIEZsaXBwZXJQbHVnaW4sIEZsZXhDb2x1bW4sIHN0eWxlZCwgVGV4dH0gZnJvbSAnZmxpcHBlcic7XG5pbXBvcnQgdHlwZSB7Tm90aWZpY2F0aW9ufSBmcm9tICcuLi8uLi9wbHVnaW4nO1xudHlwZSBEaXNwbGF5TWVzc2FnZVJlc3BvbnNlID0ge1xuICBncmVldGluZzogc3RyaW5nLFxufTtcblxudHlwZSBTdGF0ZSA9IHtcbiAgcHJvbXB0OiBzdHJpbmcsXG4gIG1lc3NhZ2U6IHN0cmluZyxcbn07XG5cbnR5cGUgUGVyc2lzdGVkU3RhdGUgPSB7XG4gIGN1cnJlbnROb3RpZmljYXRpb25JZHM6IEFycmF5PG51bWJlcj4sXG4gIHJlY2VpdmVkTWVzc2FnZTogP3N0cmluZyxcbn07XG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZChGbGV4Q29sdW1uKSh7XG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWFyb3VuZCcsXG4gIHBhZGRpbmc6IDIwLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgRmxpcHBlclBsdWdpbjwqLCBTdGF0ZSwgUGVyc2lzdGVkU3RhdGU+IHtcbiAgc3RhdGljIGRlZmF1bHRQZXJzaXN0ZWRTdGF0ZSA9IHtcbiAgICBjdXJyZW50Tm90aWZpY2F0aW9uSWRzOiBbXSxcbiAgICByZWNlaXZlZE1lc3NhZ2U6IG51bGwsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgcHJvbXB0OiAnVHlwZSBhIG1lc3NhZ2UgYmVsb3cgdG8gc2VlIGl0IGRpc3BsYXllZCBvbiB0aGUgbW9iaWxlIGFwcCcsXG4gICAgbWVzc2FnZTogJycsXG4gIH07XG5cbiAgLypcbiAgICogUmVkdWNlciB0byBwcm9jZXNzIGluY29taW5nIFwic2VuZFwiIG1lc3NhZ2VzIGZyb20gdGhlIG1vYmlsZSBjb3VudGVycGFydC5cbiAgICovXG4gIHN0YXRpYyBwZXJzaXN0ZWRTdGF0ZVJlZHVjZXIgPSAoXG4gICAgcGVyc2lzdGVkU3RhdGU6IFBlcnNpc3RlZFN0YXRlLFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHBheWxvYWQ6IE9iamVjdCxcbiAgKTogUGVyc2lzdGVkU3RhdGUgPT4ge1xuICAgIGlmIChtZXRob2QgPT09ICd0cmlnZ2VyTm90aWZpY2F0aW9uJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucGVyc2lzdGVkU3RhdGUsXG4gICAgICAgIGN1cnJlbnROb3RpZmljYXRpb25JZHM6IHBlcnNpc3RlZFN0YXRlLmN1cnJlbnROb3RpZmljYXRpb25JZHMuY29uY2F0KFtcbiAgICAgICAgICBwYXlsb2FkLmlkLFxuICAgICAgICBdKSxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtZXRob2QgPT09ICdkaXNwbGF5TWVzc2FnZScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnBlcnNpc3RlZFN0YXRlLFxuICAgICAgICByZWNlaXZlZE1lc3NhZ2U6IHBheWxvYWQubXNnLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBlcnNpc3RlZFN0YXRlIHx8IHt9O1xuICB9O1xuXG4gIC8qXG4gICAqIENhbGxiYWNrIHRvIHByb3ZpZGUgdGhlIGN1cnJlbnRseSBhY3RpdmUgbm90aWZpY2F0aW9ucy5cbiAgICovXG4gIHN0YXRpYyBnZXRBY3RpdmVOb3RpZmljYXRpb25zID0gKFxuICAgIHBlcnNpc3RlZFN0YXRlOiBQZXJzaXN0ZWRTdGF0ZSxcbiAgKTogQXJyYXk8Tm90aWZpY2F0aW9uPiA9PiB7XG4gICAgcmV0dXJuIHBlcnNpc3RlZFN0YXRlLmN1cnJlbnROb3RpZmljYXRpb25JZHMubWFwKCh4OiBudW1iZXIpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiAndGVzdC1ub3RpZmljYXRpb246JyArIHgsXG4gICAgICAgIG1lc3NhZ2U6ICdFeGFtcGxlIE5vdGlmaWNhdGlvbicsXG4gICAgICAgIHNldmVyaXR5OiAnd2FybmluZycsXG4gICAgICAgIHRpdGxlOiAnTm90aWZpY2F0aW9uOiAnICsgeCxcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgLypcbiAgICogQ2FsbCBhIG1ldGhvZCBvZiB0aGUgbW9iaWxlIGNvdW50ZXJwYXJ0LCB0byBkaXNwbGF5IGEgbWVzc2FnZS5cbiAgICovXG4gIHNlbmRNZXNzYWdlKCkge1xuICAgIHRoaXMuY2xpZW50XG4gICAgICAuY2FsbCgnZGlzcGxheU1lc3NhZ2UnLCB7bWVzc2FnZTogdGhpcy5zdGF0ZS5tZXNzYWdlIHx8ICdXZWVlZWUhJ30pXG4gICAgICAudGhlbigocGFyYW1zOiBEaXNwbGF5TWVzc2FnZVJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHByb21wdDogJ05pY2UnLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Q29udGFpbmVyPlxuICAgICAgICA8VGV4dD57dGhpcy5zdGF0ZS5wcm9tcHR9PC9UZXh0PlxuICAgICAgICA8SW5wdXRcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIk1lc3NhZ2VcIlxuICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHttZXNzYWdlOiBldmVudC50YXJnZXQudmFsdWV9KTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuc2VuZE1lc3NhZ2UuYmluZCh0aGlzKX0+U2VuZDwvQnV0dG9uPlxuICAgICAgICB7dGhpcy5wcm9wcy5wZXJzaXN0ZWRTdGF0ZS5yZWNlaXZlZE1lc3NhZ2UgJiYgKFxuICAgICAgICAgIDxUZXh0PiB7dGhpcy5wcm9wcy5wZXJzaXN0ZWRTdGF0ZS5yZWNlaXZlZE1lc3NhZ2V9IDwvVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnbG9iYWwiLCJfX3IiLCJtZXRyb1JlcXVpcmUiLCJfX2QiLCJkZWZpbmUiLCJfX2MiLCJjbGVhciIsIm1vZHVsZXMiLCJFTVBUWSIsIl9yZWYiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fTlVNX01PRFVMRVNfXyIsIkFycmF5IiwiT2JqZWN0IiwiY3JlYXRlIiwiZmFjdG9yeSIsIm1vZHVsZUlkIiwiZGVwZW5kZW5jeU1hcCIsImhhc0Vycm9yIiwiaW1wb3J0ZWRBbGwiLCJpbXBvcnRlZERlZmF1bHQiLCJpc0luaXRpYWxpemVkIiwicHVibGljTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZUlkUmVhbGx5SXNOdW1iZXIiLCJtb2R1bGUiLCJndWFyZGVkTG9hZE1vZHVsZSIsIm1ldHJvSW1wb3J0RGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibWV0cm9JbXBvcnRBbGwiLCJfa2V5IiwiY2FsbCIsImluR3VhcmQiLCJFcnJvclV0aWxzIiwicmV0dXJuVmFsdWUiLCJsb2FkTW9kdWxlSW1wbGVtZW50YXRpb24iLCJlIiwicmVwb3J0RmF0YWxFcnJvciIsIklEX01BU0tfU0hJRlQiLCJMT0NBTF9JRF9NQVNLIiwidW5wYWNrTW9kdWxlSWQiLCJzZWdtZW50SWQiLCJsb2NhbElkIiwicGFja01vZHVsZUlkIiwidmFsdWUiLCJob29rcyIsInJlZ2lzdGVySG9vayIsImNiIiwiaG9vayIsInB1c2giLCJyZWxlYXNlIiwiaSIsImxlbmd0aCIsInNwbGljZSIsIl9fZGVmaW5lTW9kdWxlIiwibmF0aXZlUmVxdWlyZSIsIl91bnBhY2tNb2R1bGVJZCIsIl9zZWdtZW50SWQiLCJfbG9jYWxJZCIsInVua25vd25Nb2R1bGVFcnJvciIsIm1vZHVsZVRocmV3RXJyb3IiLCJlcnJvciIsIl9tb2R1bGUiLCJfbW9kdWxlT2JqZWN0IiwiaWQiLCJ1bmRlZmluZWQiLCJtZXNzYWdlIiwiRXJyb3IiLCJkaXNwbGF5TmFtZSIsIkNvbnRhaW5lciIsIkZsZXhDb2x1bW4iLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJwYWRkaW5nIiwiRmxpcHBlclBsdWdpbiIsInByb21wdCIsInNlbmRNZXNzYWdlIiwiY2xpZW50Iiwic3RhdGUiLCJ0aGVuIiwicGFyYW1zIiwic2V0U3RhdGUiLCJyZW5kZXIiLCJldmVudCIsInRhcmdldCIsImJpbmQiLCJwcm9wcyIsInBlcnNpc3RlZFN0YXRlIiwicmVjZWl2ZWRNZXNzYWdlIiwiY3VycmVudE5vdGlmaWNhdGlvbklkcyIsIm1ldGhvZCIsInBheWxvYWQiLCJjb25jYXQiLCJtc2ciLCJtYXAiLCJ4Iiwic2V2ZXJpdHkiLCJ0aXRsZSJdLCJtYXBwaW5ncyI6Ijs7QUNXQTs7QUFJQUEsRUFBQUEsTUFBTSxDQUFDQyxHQUFQLEdBQWFDLFlBQWI7QUFDQUYsRUFBQUEsTUFBTSxDQUFDRyxHQUFQLEdBQWFDLE1BQWI7QUFDQUosRUFBQUEsTUFBTSxDQUFDSyxHQUFQLEdBQWFDLEtBQWI7QUFFQSxNQUFJQyxPQUFPLEdBQUdELEtBQUssRUFBbkI7QUFJQSxNQUFJRSxLQUFLLEdBQUcsRUFBWjtBQUNBLE1BQUlDLElBQUksR0FBRyxFQUFYO0FBQUEsTUFDRUMsY0FBYyxHQUFHRCxJQUFJLENBQUNDLGNBRHhCOztBQUdBLFdBQVNKLEtBQVQsR0FBaUI7QUFDZkMsSUFBQUEsT0FBTyxHQUNMLE9BQU9JLGVBQVAsS0FBMkIsUUFBM0IsR0FDSUMsS0FBSyxDQUFDRCxlQUFlLEdBQUcsQ0FBbkIsQ0FEVCxHQUVJRSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxJQUFkLENBSE47QUFRQSxXQUFPUCxPQUFQO0FBQ0Q7O0FBT0QsV0FBU0gsTUFBVCxDQUFnQlcsT0FBaEIsRUFBeUJDLFFBQXpCLEVBQW1DQyxhQUFuQyxFQUFrRDtBQUNoRCxRQUFJVixPQUFPLENBQUNTLFFBQUQsQ0FBUCxJQUFxQixJQUF6QixFQUErQjtBQW1CN0I7QUFDRDs7QUFDRFQsSUFBQUEsT0FBTyxDQUFDUyxRQUFELENBQVAsR0FBb0I7QUFDbEJDLE1BQUFBLGFBQWEsRUFBRUEsYUFERztBQUVsQkYsTUFBQUEsT0FBTyxFQUFFQSxPQUZTO0FBR2xCRyxNQUFBQSxRQUFRLEVBQUUsS0FIUTtBQUlsQkMsTUFBQUEsV0FBVyxFQUFFWCxLQUpLO0FBS2xCWSxNQUFBQSxlQUFlLEVBQUVaLEtBTEM7QUFNbEJhLE1BQUFBLGFBQWEsRUFBRSxLQU5HO0FBT2xCQyxNQUFBQSxZQUFZLEVBQUU7QUFBRUMsUUFBQUEsT0FBTyxFQUFFO0FBQVg7QUFQSSxLQUFwQjtBQXNCRDs7QUFFRCxXQUFTckIsWUFBVCxDQUFzQmMsUUFBdEIsRUFBZ0M7QUFpQjlCLFFBQUlRLHNCQUFzQixHQUFHUixRQUE3QjtBQXdCQSxRQUFJUyxNQUFNLEdBQUdsQixPQUFPLENBQUNpQixzQkFBRCxDQUFwQjtBQUVBLFdBQU9DLE1BQU0sSUFBSUEsTUFBTSxDQUFDSixhQUFqQixHQUNISSxNQUFNLENBQUNILFlBQVAsQ0FBb0JDLE9BRGpCLEdBRUhHLGlCQUFpQixDQUFDRixzQkFBRCxFQUF5QkMsTUFBekIsQ0FGckI7QUFHRDs7QUFFRCxXQUFTRSxrQkFBVCxDQUE0QlgsUUFBNUIsRUFBc0M7QUFPcEMsUUFBSVEsc0JBQXNCLEdBQUdSLFFBQTdCOztBQUVBLFFBQ0VULE9BQU8sQ0FBQ2lCLHNCQUFELENBQVAsSUFDQWpCLE9BQU8sQ0FBQ2lCLHNCQUFELENBQVAsQ0FBZ0NKLGVBQWhDLEtBQW9EWixLQUZ0RCxFQUdFO0FBQ0EsYUFBT0QsT0FBTyxDQUFDaUIsc0JBQUQsQ0FBUCxDQUFnQ0osZUFBdkM7QUFDRDs7QUFFRCxRQUFJRyxPQUFPLEdBQUdyQixZQUFZLENBQUNzQixzQkFBRCxDQUExQjtBQUNBLFFBQUlKLGVBQWUsR0FDakJHLE9BQU8sSUFBSUEsT0FBTyxDQUFDSyxVQUFuQixHQUFnQ0wsT0FBTyxDQUFDTSxPQUF4QyxHQUFrRE4sT0FEcEQ7QUFHQSxXQUFRaEIsT0FBTyxDQUFDaUIsc0JBQUQsQ0FBUCxDQUFnQ0osZUFBaEMsR0FBa0RBLGVBQTFEO0FBQ0Q7O0FBRUQsV0FBU1UsY0FBVCxDQUF3QmQsUUFBeEIsRUFBa0M7QUFPaEMsUUFBSVEsc0JBQXNCLEdBQUdSLFFBQTdCOztBQUVBLFFBQ0VULE9BQU8sQ0FBQ2lCLHNCQUFELENBQVAsSUFDQWpCLE9BQU8sQ0FBQ2lCLHNCQUFELENBQVAsQ0FBZ0NMLFdBQWhDLEtBQWdEWCxLQUZsRCxFQUdFO0FBQ0EsYUFBT0QsT0FBTyxDQUFDaUIsc0JBQUQsQ0FBUCxDQUFnQ0wsV0FBdkM7QUFDRDs7QUFFRCxRQUFJSSxPQUFPLEdBQUdyQixZQUFZLENBQUNzQixzQkFBRCxDQUExQjtBQUNBLFFBQUlMLFdBQVcsWUFBZjs7QUFFQSxRQUFJSSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0ssVUFBdkIsRUFBbUM7QUFDakNULE1BQUFBLFdBQVcsR0FBR0ksT0FBZDtBQUNELEtBRkQsTUFFTztBQUNMSixNQUFBQSxXQUFXLEdBQUcsRUFBZDs7QUFHQSxVQUFJSSxPQUFKLEVBQWE7QUFDWCxhQUFLLElBQUlRLElBQVQsSUFBaUJSLE9BQWpCLEVBQTBCO0FBQ3hCLGNBQUliLGNBQWMsQ0FBQ3NCLElBQWYsQ0FBb0JULE9BQXBCLEVBQTZCUSxJQUE3QixDQUFKLEVBQXdDO0FBQ3RDWixZQUFBQSxXQUFXLENBQUNZLElBQUQsQ0FBWCxHQUFvQlIsT0FBTyxDQUFDUSxJQUFELENBQTNCO0FBQ0Q7QUFDRjtBQUNGOztBQUVEWixNQUFBQSxXQUFXLENBQUNVLE9BQVosR0FBc0JOLE9BQXRCO0FBQ0Q7O0FBRUQsV0FBUWhCLE9BQU8sQ0FBQ2lCLHNCQUFELENBQVAsQ0FBZ0NMLFdBQWhDLEdBQThDQSxXQUF0RDtBQUNEOztBQUVELE1BQUljLE9BQU8sR0FBRyxLQUFkOztBQUNBLFdBQVNQLGlCQUFULENBQTJCVixRQUEzQixFQUFxQ1MsTUFBckMsRUFBNkM7QUFDM0MsUUFBSSxDQUFDUSxPQUFELElBQVlqQyxNQUFNLENBQUNrQyxVQUF2QixFQUFtQztBQUNqQ0QsTUFBQUEsT0FBTyxHQUFHLElBQVY7QUFDQSxVQUFJRSxXQUFXLFlBQWY7O0FBQ0EsVUFBSTtBQUNGQSxRQUFBQSxXQUFXLEdBQUdDLHdCQUF3QixDQUFDcEIsUUFBRCxFQUFXUyxNQUFYLENBQXRDO0FBQ0QsT0FGRCxDQUVFLE9BQU9ZLENBQVAsRUFBVTtBQUNWckMsUUFBQUEsTUFBTSxDQUFDa0MsVUFBUCxDQUFrQkksZ0JBQWxCLENBQW1DRCxDQUFuQztBQUNEOztBQUNESixNQUFBQSxPQUFPLEdBQUcsS0FBVjtBQUNBLGFBQU9FLFdBQVA7QUFDRCxLQVZELE1BVU87QUFDTCxhQUFPQyx3QkFBd0IsQ0FBQ3BCLFFBQUQsRUFBV1MsTUFBWCxDQUEvQjtBQUNEO0FBQ0Y7O0FBRUQsTUFBSWMsYUFBYSxHQUFHLEVBQXBCO0FBQ0EsTUFBSUMsYUFBYSxRQUFqQjs7QUFFQSxXQUFTQyxjQUFULENBQXdCekIsUUFBeEIsRUFBa0M7QUFDaEMsUUFBSTBCLFNBQVMsR0FBRzFCLFFBQVEsS0FBS3VCLGFBQTdCO0FBQ0EsUUFBSUksT0FBTyxHQUFHM0IsUUFBUSxHQUFHd0IsYUFBekI7QUFDQSxXQUFPO0FBQUVFLE1BQUFBLFNBQVMsRUFBRUEsU0FBYjtBQUF3QkMsTUFBQUEsT0FBTyxFQUFFQTtBQUFqQyxLQUFQO0FBQ0Q7O0FBQ0R6QyxFQUFBQSxZQUFZLENBQUN1QyxjQUFiLEdBQThCQSxjQUE5Qjs7QUFFQSxXQUFTRyxZQUFULENBQXNCQyxLQUF0QixFQUE2QjtBQUMzQixXQUFPLENBQUNBLEtBQUssQ0FBQ0gsU0FBTixJQUFtQkgsYUFBcEIsSUFBcUNNLEtBQUssQ0FBQ0YsT0FBbEQ7QUFDRDs7QUFDRHpDLEVBQUFBLFlBQVksQ0FBQzBDLFlBQWIsR0FBNEJBLFlBQTVCO0FBRUEsTUFBSUUsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsV0FBU0MsWUFBVCxDQUFzQkMsRUFBdEIsRUFBMEI7QUFDeEIsUUFBSUMsSUFBSSxHQUFHO0FBQUVELE1BQUFBLEVBQUUsRUFBRUE7QUFBTixLQUFYO0FBQ0FGLElBQUFBLEtBQUssQ0FBQ0ksSUFBTixDQUFXRCxJQUFYO0FBQ0EsV0FBTztBQUNMRSxNQUFBQSxPQUFPLEVBQUUsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixhQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdOLEtBQUssQ0FBQ08sTUFBMUIsRUFBa0MsRUFBRUQsQ0FBcEMsRUFBdUM7QUFDckMsY0FBSU4sS0FBSyxDQUFDTSxDQUFELENBQUwsS0FBYUgsSUFBakIsRUFBdUI7QUFDckJILFlBQUFBLEtBQUssQ0FBQ1EsTUFBTixDQUFhRixDQUFiLEVBQWdCLENBQWhCO0FBQ0E7QUFDRDtBQUNGO0FBQ0Y7QUFSSSxLQUFQO0FBVUQ7O0FBQ0RsRCxFQUFBQSxZQUFZLENBQUM2QyxZQUFiLEdBQTRCQSxZQUE1Qjs7QUFFQSxXQUFTWCx3QkFBVCxDQUFrQ3BCLFFBQWxDLEVBQTRDUyxNQUE1QyxFQUFvRDtBQUNsRCxRQUFJLENBQUNBLE1BQUQsSUFBV3pCLE1BQU0sQ0FBQ3VELGNBQXRCLEVBQXNDO0FBQ3BDdkQsTUFBQUEsTUFBTSxDQUFDdUQsY0FBUCxDQUFzQnZDLFFBQXRCOztBQUNBUyxNQUFBQSxNQUFNLEdBQUdsQixPQUFPLENBQUNTLFFBQUQsQ0FBaEI7QUFDRDs7QUFFRCxRQUFJd0MsYUFBYSxHQUFHeEQsTUFBTSxDQUFDd0QsYUFBM0I7O0FBQ0EsUUFBSSxDQUFDL0IsTUFBRCxJQUFXK0IsYUFBZixFQUE4QjtBQUM1QixVQUFJQyxlQUFlLEdBQUdoQixjQUFjLENBQUN6QixRQUFELENBQXBDO0FBQUEsVUFDRTBDLFVBQVUsR0FBR0QsZUFBZSxDQUFDZixTQUQvQjtBQUFBLFVBRUVpQixRQUFRLEdBQUdGLGVBQWUsQ0FBQ2QsT0FGN0I7O0FBSUFhLE1BQUFBLGFBQWEsQ0FBQ0csUUFBRCxFQUFXRCxVQUFYLENBQWI7QUFDQWpDLE1BQUFBLE1BQU0sR0FBR2xCLE9BQU8sQ0FBQ1MsUUFBRCxDQUFoQjtBQUNEOztBQUVELFFBQUksQ0FBQ1MsTUFBTCxFQUFhO0FBQ1gsWUFBTW1DLGtCQUFrQixDQUFDNUMsUUFBRCxDQUF4QjtBQUNEOztBQUVELFFBQUlTLE1BQU0sQ0FBQ1AsUUFBWCxFQUFxQjtBQUNuQixZQUFNMkMsZ0JBQWdCLENBQUM3QyxRQUFELEVBQVdTLE1BQU0sQ0FBQ3FDLEtBQWxCLENBQXRCO0FBQ0Q7O0FBY0RyQyxJQUFBQSxNQUFNLENBQUNKLGFBQVAsR0FBdUIsSUFBdkI7QUFFQSxRQUFJMEMsT0FBTyxHQUFHdEMsTUFBZDtBQUFBLFFBQ0VWLE9BQU8sR0FBR2dELE9BQU8sQ0FBQ2hELE9BRHBCO0FBQUEsUUFFRUUsYUFBYSxHQUFHOEMsT0FBTyxDQUFDOUMsYUFGMUI7O0FBT0EsUUFBSTtBQU1GLFVBQUkrQyxhQUFhLEdBQUd2QyxNQUFNLENBQUNILFlBQTNCO0FBT0EwQyxNQUFBQSxhQUFhLENBQUNDLEVBQWQsR0FBbUJqRCxRQUFuQjs7QUFFQSxVQUFJOEIsS0FBSyxDQUFDTyxNQUFOLEdBQWUsQ0FBbkIsRUFBc0I7QUFDcEIsYUFBSyxJQUFJRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTixLQUFLLENBQUNPLE1BQTFCLEVBQWtDLEVBQUVELENBQXBDLEVBQXVDO0FBQ3JDTixVQUFBQSxLQUFLLENBQUNNLENBQUQsQ0FBTCxDQUFTSixFQUFULENBQVloQyxRQUFaLEVBQXNCZ0QsYUFBdEI7QUFDRDtBQUNGOztBQUtEakQsTUFBQUEsT0FBTyxDQUNMZixNQURLLEVBRUxFLFlBRkssRUFHTHlCLGtCQUhLLEVBSUxHLGNBSkssRUFLTGtDLGFBTEssRUFNTEEsYUFBYSxDQUFDekMsT0FOVCxFQU9MTixhQVBLLENBQVA7QUFXYztBQUVaUSxRQUFBQSxNQUFNLENBQUNWLE9BQVAsR0FBaUJtRCxTQUFqQjtBQUNBekMsUUFBQUEsTUFBTSxDQUFDUixhQUFQLEdBQXVCaUQsU0FBdkI7QUFDRDtBQU1ELGFBQU9GLGFBQWEsQ0FBQ3pDLE9BQXJCO0FBQ0QsS0E5Q0QsQ0E4Q0UsT0FBT2MsQ0FBUCxFQUFVO0FBQ1ZaLE1BQUFBLE1BQU0sQ0FBQ1AsUUFBUCxHQUFrQixJQUFsQjtBQUNBTyxNQUFBQSxNQUFNLENBQUNxQyxLQUFQLEdBQWV6QixDQUFmO0FBQ0FaLE1BQUFBLE1BQU0sQ0FBQ0osYUFBUCxHQUF1QixLQUF2QjtBQUNBSSxNQUFBQSxNQUFNLENBQUNILFlBQVAsQ0FBb0JDLE9BQXBCLEdBQThCMkMsU0FBOUI7QUFDQSxZQUFNN0IsQ0FBTjtBQUNELEtBcERELFNBb0RVLENBUVQ7QUFDRjs7QUFFRCxXQUFTdUIsa0JBQVQsQ0FBNEJLLEVBQTVCLEVBQWdDO0FBQzlCLFFBQUlFLE9BQU8sR0FBRywrQkFBK0JGLEVBQS9CLEdBQW9DLElBQWxEO0FBTUEsV0FBT0csS0FBSyxDQUFDRCxPQUFELENBQVo7QUFDRDs7QUFFRCxXQUFTTixnQkFBVCxDQUEwQkksRUFBMUIsRUFBOEJILEtBQTlCLEVBQXFDO0FBQ25DLFFBQUlPLFdBQVcsR0FBMERKLEVBQXpFO0FBQ0EsV0FBT0csS0FBSyxDQUNWLHVCQUF1QkMsV0FBdkIsR0FBcUMsK0JBQXJDLEdBQXVFUCxLQUQ3RCxDQUFaO0FBR0Q7Ozs7Ozs7OztBQzVXRDs7Ozs7O0FBZ0JBLFFBQU1RLFNBQVMsR0FBRyxxQkFBT0MsbUJBQVAsRUFBbUI7QUFDbkNDLElBQUFBLFVBQVUsRUFBRSxRQUR1QjtBQUVuQ0MsSUFBQUEsY0FBYyxFQUFFLGNBRm1CO0FBR25DQyxJQUFBQSxPQUFPLEVBQUU7QUFIMEIsR0FBbkIsQ0FBbEI7O0FBTWUsdUJBQWNDLHNCQUFkLENBQXNEO0FBQUE7QUFBQTs7QUFBQSxxQ0FNM0Q7QUFDTkMsUUFBQUEsTUFBTSxFQUFFLDREQURGO0FBRU5ULFFBQUFBLE9BQU8sRUFBRTtBQUZILE9BTjJEO0FBQUE7O0FBdURuRVUsSUFBQUEsV0FBVyxHQUFHO0FBQ1osV0FBS0MsTUFBTCxDQUNHOUMsSUFESCxDQUNRLGdCQURSLEVBQzBCO0FBQUNtQyxRQUFBQSxPQUFPLEVBQUUsS0FBS1ksS0FBTCxDQUFXWixPQUFYLElBQXNCO0FBQWhDLE9BRDFCLEVBRUdhLElBRkgsQ0FFU0MsTUFBRCxJQUFvQztBQUN4QyxhQUFLQyxRQUFMLENBQWM7QUFDWk4sVUFBQUEsTUFBTSxFQUFFO0FBREksU0FBZDtBQUdELE9BTkg7QUFPRDs7QUFFRE8sSUFBQUEsTUFBTSxHQUFHO0FBQ1AsYUFDRSwyQkFBQyxTQUFELFFBQ0UsMkJBQUMsYUFBRCxRQUFPLEtBQUtKLEtBQUwsQ0FBV0gsTUFBbEIsQ0FERixFQUVFLDJCQUFDLGNBQUQ7QUFDRSxRQUFBLFdBQVcsRUFBQyxTQURkO0FBRUUsUUFBQSxRQUFRLEVBQUVRLEtBQUssSUFBSTtBQUNqQixlQUFLRixRQUFMLENBQWM7QUFBQ2YsWUFBQUEsT0FBTyxFQUFFaUIsS0FBSyxDQUFDQyxNQUFOLENBQWF4QztBQUF2QixXQUFkO0FBQ0Q7QUFKSCxRQUZGLEVBUUUsMkJBQUMsZUFBRDtBQUFRLFFBQUEsT0FBTyxFQUFFLEtBQUtnQyxXQUFMLENBQWlCUyxJQUFqQixDQUFzQixJQUF0QjtBQUFqQixnQkFSRixFQVNHLEtBQUtDLEtBQUwsQ0FBV0MsY0FBWCxDQUEwQkMsZUFBMUIsSUFDQywyQkFBQyxhQUFELGFBQVEsS0FBS0YsS0FBTCxDQUFXQyxjQUFYLENBQTBCQyxlQUFsQyxNQVZKLENBREY7QUFlRDs7QUFqRmtFOzs7O21EQUNwQztBQUM3QkMsSUFBQUEsc0JBQXNCLEVBQUUsRUFESztBQUU3QkQsSUFBQUEsZUFBZSxFQUFFO0FBRlksRzs7bURBYUEsQ0FDN0JELGNBRDZCLEVBRTdCRyxNQUY2QixFQUc3QkMsT0FINkIsS0FJVjtBQUNuQixRQUFJRCxNQUFNLEtBQUsscUJBQWYsRUFBc0M7QUFDcEMsK0JBQ0tILGNBREw7QUFFRUUsUUFBQUEsc0JBQXNCLEVBQUVGLGNBQWMsQ0FBQ0Usc0JBQWYsQ0FBc0NHLE1BQXRDLENBQTZDLENBQ25FRCxPQUFPLENBQUMzQixFQUQyRCxDQUE3QztBQUYxQjtBQU1EOztBQUNELFFBQUkwQixNQUFNLEtBQUssZ0JBQWYsRUFBaUM7QUFDL0IsK0JBQ0tILGNBREw7QUFFRUMsUUFBQUEsZUFBZSxFQUFFRyxPQUFPLENBQUNFO0FBRjNCO0FBSUQ7O0FBQ0QsV0FBT04sY0FBYyxJQUFJLEVBQXpCO0FBQ0QsRzs7b0RBTUNBLGNBRDhCLElBRU47QUFDeEIsV0FBT0EsY0FBYyxDQUFDRSxzQkFBZixDQUFzQ0ssR0FBdEMsQ0FBMkNDLENBQUQsSUFBZTtBQUM5RCxhQUFPO0FBQ0wvQixRQUFBQSxFQUFFLEVBQUUsdUJBQXVCK0IsQ0FEdEI7QUFFTDdCLFFBQUFBLE9BQU8sRUFBRSxzQkFGSjtBQUdMOEIsUUFBQUEsUUFBUSxFQUFFLFNBSEw7QUFJTEMsUUFBQUEsS0FBSyxFQUFFLG1CQUFtQkY7QUFKckIsT0FBUDtBQU1ELEtBUE0sQ0FBUDtBQVFELEcifQ==