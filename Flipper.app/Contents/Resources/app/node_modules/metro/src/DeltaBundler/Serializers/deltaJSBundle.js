/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 * @format
 */

"use strict";
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  } else {
    return Array.from(arr);
  }
}

const getAppendScripts = require("../../lib/getAppendScripts");
var _require = require("./helpers/js");
const wrapModule = _require.wrapModule;
var _require2 = require("./helpers/js");
const getJsOutput = _require2.getJsOutput,
  isJsModule = _require2.isJsModule;

function deltaJSBundle(entryPoint, pre, delta, revisionId, graph, options) {
  const processModuleFilter = options.processModuleFilter;

  const modules = []
    .concat(_toConsumableArray(delta.modified.values()))
    .filter(isJsModule)
    .filter(processModuleFilter)
    .map(module => [
      options.createModuleId(module.path),
      wrapModule(module, options)
    ]);

  if (delta.reset) {
    const appendScripts = getAppendScripts(entryPoint, pre, graph, options);

    return {
      base: true,
      revisionId,
      pre: pre
        .filter(isJsModule)
        .filter(processModuleFilter)
        .map(module => getJsOutput(module).data.code)
        .join("\n"),
      post: appendScripts
        .filter(isJsModule)
        .filter(processModuleFilter)
        .map(module => getJsOutput(module).data.code)
        .join("\n"),
      modules
    };
  }

  return {
    base: false,
    revisionId,
    modules,
    deleted: []
      .concat(_toConsumableArray(delta.deleted))
      .map(path => options.createModuleId(path))
  };
}

module.exports = deltaJSBundle;
